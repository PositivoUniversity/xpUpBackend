// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using xpUpBackend.ContextDb;

#nullable disable

namespace xpUpBackend.Migrations
{
    [DbContext(typeof(XpUpContext))]
    [Migration("20231118132915_initialLikesEdit")]
    partial class initialLikesEdit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("xpUpBackend.Models.CheckIn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Check")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Events")
                        .HasColumnType("integer");

                    b.Property<int?>("NewsId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Users")
                        .HasColumnType("integer");

                    b.Property<int>("eventId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Events");

                    b.HasIndex("NewsId");

                    b.HasIndex("Users");

                    b.ToTable("CheckIn");
                });

            modelBuilder.Entity("xpUpBackend.Models.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("xpUpBackend.Models.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserPost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("xpUpBackend.Models.Likes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Events")
                        .HasColumnType("integer");

                    b.Property<bool>("Like")
                        .HasColumnType("boolean");

                    b.Property<int?>("News")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Users")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Events");

                    b.HasIndex("News");

                    b.HasIndex("Users");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("xpUpBackend.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PublishedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("xpUpBackend.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordTip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("xpUpBackend.Models.CheckIn", b =>
                {
                    b.HasOne("xpUpBackend.Models.Events", "Event")
                        .WithMany("CheckIns")
                        .HasForeignKey("Events")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xpUpBackend.Models.News", null)
                        .WithMany("CheckIns")
                        .HasForeignKey("NewsId");

                    b.HasOne("xpUpBackend.Models.Users", "CheckedBy")
                        .WithMany()
                        .HasForeignKey("Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckedBy");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("xpUpBackend.Models.Likes", b =>
                {
                    b.HasOne("xpUpBackend.Models.Events", "Event")
                        .WithMany("Likes")
                        .HasForeignKey("Events");

                    b.HasOne("xpUpBackend.Models.News", "Notice")
                        .WithMany("Likes")
                        .HasForeignKey("News");

                    b.HasOne("xpUpBackend.Models.Users", "LikedBy")
                        .WithMany()
                        .HasForeignKey("Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("LikedBy");

                    b.Navigation("Notice");
                });

            modelBuilder.Entity("xpUpBackend.Models.Users", b =>
                {
                    b.HasOne("xpUpBackend.Models.Courses", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("xpUpBackend.Models.Events", b =>
                {
                    b.Navigation("CheckIns");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("xpUpBackend.Models.News", b =>
                {
                    b.Navigation("CheckIns");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
